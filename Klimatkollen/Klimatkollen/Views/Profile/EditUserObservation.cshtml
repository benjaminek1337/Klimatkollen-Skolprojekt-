@*@model Klimatkollen.Models.Measurement*@
@model Klimatkollen.ViewModels.ObservationFilterViewModel

@{
    ViewBag.Title = "Ändra observation";
}

<h1>Ändra observation</h1>
<hr />

<div id="editForm">
    <form method="post" enctype="multipart/form-data">
        @Html.AntiForgeryToken()

        <h3>Observation av @Model.Observation.MainCategory.CategoryName</h3>
        <br />
        @if (@Model.Observation.maincategoryId == 2)
        {
            <h6 style="display:inline-block;">Djur:</h6>
            <span> @Model.Category.Type</span>
            <br />
            foreach (var item in @Model.Measurements)
            {
                if (item.ThirdCategory.Unit == "Päls")
                {
                    <h6 style="display:inline-block;">Päls:</h6>
                }
                else if (item.ThirdCategory.Unit == "Miljö")
                {
                    <br />
                    <h6 style="display:inline-block;">Sågs i:</h6>
                }
                <span> @item.ThirdCategory.Type</span>
            }

        }
        @if (@Model.Observation.maincategoryId != 2)
        {
            <h6 style="display:inline-block;">Typ av mätning:</h6>
            <span> @Model.Category.Type</span>

            foreach (var item in @Model.Measurements)
            {
                if (item.Value != null)
                {
                    <br />
                    @*<label class="col-form-label col-sm-2">Värde: (@item.ThirdCategory.Unit)</label>*@
                    <h6 style="display:inline-block;">Värde:</h6><span> (@item.ThirdCategory.Unit)</span>
                    <div class="col-sm-4">
                        <input asp-for="@item.Value" class="form-control" type="text" value="@item.Value" name="measurmentValue" id="measurmentValue" />
                        <input asp-for="@item.Id" class="form-control" type="hidden" value="@item.Id" name="measurmentId" id="measurmentId" />

                    </div>
                }
            }
        }

        @*<div class="form-group row">
                <label class="col-form-label col-sm-2">@Model.ThirdCategory.Unit Värde:</label>
                <div class="col-sm-10">
                    <input asp-for="@Model.Value" class="form-control" value="@Model.Value" />
                </div>
            </div>*@


        @*<label class="col-form-label col-sm-2">Kommentar:</label>*@
        <h6>Kommentar:</h6>
        <div class="col-sm-8">
            @Html.TextAreaFor(model => model.Observation.Comment, new { htmlAttributes = new { @class = "form-control CommentTextBox" } })
        </div>



        @*<label class="col-form-label col-sm-2">Datum:</label>*@

        <h6>Datum:</h6>
        <div class="col-sm-4">
            @Html.EditorFor(model => model.Observation.Date, new { htmlAttributes = new { @class = "form-control", @type = "date" } })
        </div>
        <br />
        <h6>Bild:</h6>
        <div class="form-group row">
            <div class="col-md-5 custom-file" style="visibility: visible">
                <input asp-for="@Model.CreateMeasurementViewModel.Photo" class="form-control custom-file-input" />
                <label class="custom-file-label">Välj bild...</label>
                <input asp-for="@Model.Measurement.Id" class="form-control" type="hidden" value="@Model.Measurement.Id" name="measurmentId" id="measurmentId" />
                <input asp-for="@Model.Observation.Id" class="form-control" type="hidden" value="@Model.Observation.Id" name="observationId" id="observationId" />
            </div>
            <div class="col-md-3">
                @if (Model.Measurement.PhotoPath != null)
                {
                    <a asp-action="DeletePhoto" asp-controller="Profile" asp-route-measurementid="@Model.Measurement.Id"
                       asp-route-observationid="@Model.Observation.Id" asp-route-photoname="@Model.Measurement.PhotoPath">
                        <input type="button" asp-action="DeletePhoto" class="btn btn-danger" value="Ta bort bild" />
                    </a>
                    <br />
                }
            </div>
        </div>
        <div class="photo" style="height:auto; width:250px;">
            @if (Model.Measurement.PhotoPath != null)
            {
                var photoPath = "~/pictures/" + (Model.Measurement.PhotoPath ?? "noimage.jpg");
                <div style="height:auto; width:300px;">
                    <img class="card-img-top" style="height:auto; width:350px;" src="@photoPath" asp-append-version="true" />
                </div>
            }
        </div>


        <input type="hidden" value="@Model.Observation.Id" asp-for="@Model.Observation.Id" />
        <input id="long" type="hidden" value="@Model.Observation.Longitude" asp-for="@Model.Observation.Longitude" />
        <input id="lat" type="hidden" value="@Model.Observation.Latitude" asp-for="@Model.Observation.Latitude" />
        <input type="hidden" asp-for="@Model.Observation.Person" value="@Model.Observation.Person" />
        <input id="hiddenPlace" type="hidden" asp-for="@Model.Observation.Place" value="@Model.Observation.Place" />
        <input id="hiddenAdministrativeArea" type="hidden" asp-for="@Model.Observation.AdministrativeArea" value="@Model.Observation.AdministrativeArea" />
        <input id="hiddenCountry" type="hidden" asp-for="@Model.Observation.Country" value="@Model.Observation.Country" />
        <input type="hidden" asp-for="@Model.Measurements" value="@Model.Measurements" />


        <br />
        <h5 style="text-align:center">Välj plats där observation gjordes på kartan nedan</h5>
        <div id="map" style="height: 500px; width:100%; border-radius: 10px; box-shadow: 3px 7px 5px #888888"></div>
        <br />
        <input type="submit" value="Uppdatera observation" class="btn btn-primary" asp-action="PostEditUserObservation" asp-controller="Profile" />

        <button type="button" class="btn btn-danger"><a style="color:white" asp-action="DeleteObservation" asp-controller="Profile" asp-route-id="@Model.Observation.Id">Ta bort observation</a></button>
    </form>
</div>
<script>
    $(document).ready(function () {
        $(".custom-file-input").on("change", function () {
            var fileName = $(this).val().split("\\").pop();
            $(this).next(".custom-file-label").html(fileName);
        });

        $("#datepicker").datepicker();
    });
</script>

<script>
    $(document).ready(function () {
        $("#datepicker").datepicker();
    });
</script>


<script>
    var map, marker;

    //API-nyckel
    var key = "AIzaSyBagdhMKVaEPqLco2PxO2NCSTPYeU_T4gU"

    //Metod som hämtar områden i text utifrån koordinater och lägger dessa i droplist
    function GetAreasJson(_lat, _lng) {
        var lat = _lat;
        var lng = _lng;

        let url = "https://maps.googleapis.com/maps/api/geocode/json?latlng=" + lat + "," + lng + "&key="
            + key;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                console.log(data);
                let parts = data.results[0].address_components;
                parts.forEach(part => {
                    if (part.types.includes("country")) {
                        document.getElementById("hiddenCountry").value = part.long_name;
                    }
                    if (part.types.includes("administrative_area_level_1")) {
                        document.getElementById("hiddenAdministrativeArea").value = part.long_name;
                    }
                    if (part.types.includes("transit_station")) {
                        document.getElementById("hiddenPlace").value = part.long_name;
                    }
                    else if (part.types.includes("locality")) {
                        document.getElementById("hiddenPlace").value = part.long_name;
                    }
                    else if (part.types.includes("postal_town")) {
                        document.getElementById("hiddenPlace").value = part.long_name;
                    }
                });
            })
            .catch(error => console.warn(error.message));
    }

    $(document).ready(function () {

        function myMap(lat, long) {
            var myCenter = new google.maps.LatLng(lat, long);
            var mapCanvas = document.getElementById("map");
            var latInput = document.getElementById("lat").value;
            var longInput = document.getElementById("long").value;
            var coords = { lat: Number(latInput), lng: Number(longInput) };

            var mapOptions = {
                center: coords,
                zoom: 12,
                streetViewControl: false,
                mapTypeControl: true,
                zoomControl: false,
                scrollwheel: true
            };

            map = new google.maps.Map(mapCanvas, mapOptions);
            //if (navigator.geolocation) {
            //    navigator.geolocation.getCurrentPosition(function (position) {
            //        latInput = document.getElementById("lat").value = position.coords.latitude;
            //        longInput = document.getElementById("long").value = position.coords.longitude;

            marker = new google.maps.Marker({
                position: { lat: Number(latInput), lng: Number(longInput) },
                map: map,
                draggable: true
            });
            marker.addListener('click', function () {
                map.setCenter(marker.getPosition());
            });
            marker.addListener('dragend', function () {
                var lat = document.getElementById("lat").value = marker.getPosition().lat();
                var long = document.getElementById("long").value = marker.getPosition().lng();
                GetAreasJson(lat, long);
            });

            map.setCenter(marker.getPosition());
            //    }, function () {
            //        handleLocationError(true, infoWindow, map.getCenter());
            //    });
            //} else {
            //    // Browser doesn't support Geolocation
            //    handleLocationError(false, infoWindow, map.getCenter());
            //}

            //marker = new google.maps.Marker({
            //        position: myCenter,
            //        draggable: true
            //    }
            //);
            //marker.setMap(map);
        }

        //function handleLocationError(browserHasGeolocation, infoWindow, pos) {
        //    infoWindow.setPosition(pos);
        //    infoWindow.setContent(browserHasGeolocation ?
        //        'Error: The Geolocation service failed.' :
        //        'Error: Your browser doesn\'t support geolocation.');
        //    infoWindow.open(map);
        //}

        google.maps.event.addDomListener(window, 'load', myMap(67.85426620914679, 20.227949203380874));

        map.addListener('click', function (event) {
            marker.setPosition(event.latLng);
            var lat = document.getElementById("lat").value = marker.getPosition().lat();
            var long = document.getElementById("long").value = marker.getPosition().lng();
            GetAreasJson(lat, long);
        });
    });

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBagdhMKVaEPqLco2PxO2NCSTPYeU_T4gU&callback=initMap"
        async defer></script>
