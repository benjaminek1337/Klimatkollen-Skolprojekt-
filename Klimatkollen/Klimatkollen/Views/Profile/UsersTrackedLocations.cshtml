@model Klimatkollen.Models.UsersTrackedLocations

@{
    ViewData["Title"] = "Välj områden att bevaka";
    var locationList = ViewBag.Locations;
}
<h1>Välj områden att bevaka</h1>
<hr />
<h5>Peka på ett område på kartan nedan</h5>


<div id="map" style="height: 550px; border-radius: 8px; box-shadow: 3px 7px 5px #888888" class="col-sm-8"></div>
<div id="inputs">
    <form asp-action="SaveUsersTrackedLocation" asp-controller="Profile" method="post" class="col-sm-12">
        <input class="form-control" asp-for="@Model.Latitude" type="hidden" value="" placeholder="Latitud..." id="lat" />
        <input class="form-control" asp-for="@Model.Longitude" type="hidden" value="" placeholder="Longitud..." id="long" />
        <input class="form-control" required type="hidden" id="locationHidden" value="" asp-for="@Model.Location" />
        <br />

        <div id="textarea" style="display:none">
            <h5>Skriv ett område i rutan nedan</h5>

            <div class="form-group row">
                <div class="col-sm-6">
                    <input class="form-control" type="text" placeholder="Fritextsök område..." id="areaTextBox" />
                </div>
                <div class="col-sm-2">
                    <input type="button" style="min-width: 100%" value="Sök" class="btn btn-outline-info" onclick="GetLatLongFromString(), ShowDroplist()" />
                </div>
            </div>
            <div class="form-group row">

            </div>
        </div>

        <div id="droplist">
            <h5>Och välj ett område från listan</h5>

            <div class="form-group row">
                <div class="col-sm-8">
                    <select id="areas" class="form-control" onchange="HiddenLocation()">
                        <option>Välj område att bevaka</option>
                    </select>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-sm-4">
                    <input type="button" value="Eller sök med fritext" style="min-width: 100%" class="btn btn-outline-info" onclick="HideDroplist()" />
                    <br />
                </div>
                <div class="col-sm-4" style="text-align:right">
                    <input type="submit" id="submitbtn" style="min-width:100%" value="Bevaka området" class="btn btn-info" />
                </div>
            </div>
        </div>


    </form>

</div>

<div id="watchlist" class="col-sm-8">
    <br />
    <h4>Områden som bevakas:</h4>
    @if (locationList != null)
    {
        foreach (var loc in locationList)
        {
            <div class="form-group row">
                <div class="col-sm-9">
                    <text style="font-size:18px">@loc.Location<text>
                </div>
                <div class="col-sm-3">
                    <a style="color:red" asp-action="DeleteUsersTrackedLocation" asp-controller="Profile" asp-route-id="@loc.Id">
                        Sluta bevaka område
                    </a>
                </div>
            </div>
            <hr />
        }
    }
</div>

<script>
    function ShowDroplist() {
        $("#droplist").show(200);
        $("#textarea").hide()
    }
    function HideDroplist() {
        $("#droplist").hide();
        $("#textarea").show(200)
    }
    function HiddenLocation() {
        var dropdown = document.getElementById("areas");
        var location = dropdown.options[dropdown.selectedIndex].text;

        document.getElementById("locationHidden").value = location;
    }

    $(document).keypress(
        function (event) {
            if (event.which == '13') {
                event.preventDefault();
            }
        });
</script>

<script>
    var map, marker;

    //API-nyckel
    var key = "AIzaSyBagdhMKVaEPqLco2PxO2NCSTPYeU_T4gU"

    //Metod för att ta in text från textbox och ta ut koordinater utifrån det
    function GetLatLongFromString() {
        var areaString = document.getElementById("areaTextBox").value;
        var lat, long;
        let url = "https://maps.googleapis.com/maps/api/geocode/json?address=" + areaString + "&region=swe&key=" + key;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                console.log(url);
                console.log(data);
                lat = data.results[0].geometry.location.lat;
                long = data.results[0].geometry.location.lng;
                console.log(lat, long);

                GetAreasJson(lat, long);
                GetLatLongFromTextArea(lat, long);

            })
            .catch(error => console.warn(error.message));

    }

    //Metod för att tömma droplist
    function removeOptions(selectbox) {
        var i;
        for (i = selectbox.options.length - 1; i >= 0; i--) {
            selectbox.remove(i);
        }
    }

    //Metod som hämtar områden i text utifrån koordinater och lägger dessa i droplist
    function GetAreasJson(_lat, _lng) {
        var select = document.getElementById("areas");
        removeOptions(select);
        var lat = _lat;
        var lng = _lng;

        let url = "https://maps.googleapis.com/maps/api/geocode/json?latlng=" + lat + "," + lng + "&key="
            + key;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                console.log(data);
                let parts = data.results[0].address_components;
                parts.forEach(part => {
                    if (part.types.includes("administrative_area_level_1")
                        || part.types.includes("administrative_area_level_2")
                        || part.types.includes("country")
                        || part.types.includes("locality")
                        || part.types.includes("postal_town")
                        || part.types.includes("transit_station")
                        || part.types.includes("county")
                    ) {
                        var option = document.createElement("option");
                        option.setAttribute("id", "option");

                        option.text = part.long_name;
                        select.add(option);
                    }
                });
                HiddenLocation();
            })
            .catch(error => console.warn(error.message));
    }


    $(document).ready(function () {

        //Metod för att dra igång kartan
        function myMap(lat, long) {
            var myCenter = new google.maps.LatLng(lat, long);
            var mapCanvas = document.getElementById("map");
            var latInput, longInput;

            var mapOptions = {
                center: myCenter,
                zoom: 12,
                streetViewControl: false,
                mapTypeControl: true,
                zoomControl: false,
                scrollwheel: true
            };
            //Skapar kartan, plockar enhetens position (vid godkännande) och lägger markern på plats
            //Kallar även på metod för att hämta områden kopplade till latlng
            map = new google.maps.Map(mapCanvas, mapOptions);
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    latInput = document.getElementById("lat").value = position.coords.latitude;
                    longInput = document.getElementById("long").value = position.coords.longitude;

                    marker = new google.maps.Marker({
                        position: { lat: latInput, lng: longInput },
                        map: map,
                        draggable: true
                    });
                    marker.addListener('click', function () {
                        map.setCenter(marker.getPosition());
                    });
                    marker.addListener('dragend', function () {
                        document.getElementById("lat").value = marker.getPosition().lat();
                        document.getElementById("long").value = marker.getPosition().lng();
                    });

                    map.setCenter(marker.getPosition());
                    GetAreasJson(latInput, longInput);
                }, function () {
                    handleLocationError(true, infoWindow, map.getCenter());
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());
            }
        };

        marker = new google.maps.Marker({
            position: myCenter,
            draggable: true
        }
        );
        marker.setMap(map);

        function handleLocationError(browserHasGeolocation, infoWindow, pos) {
            infoWindow.setPosition(pos);
            infoWindow.setContent(browserHasGeolocation ?
                'Error: The Geolocation service failed.' :
                'Error: Your browser doesn\'t support geolocation.');
            infoWindow.open(map);
        }

        //Dessa rader ser till att markern är flyttbar med klick
        google.maps.event.addDomListener(window, 'load', myMap(67.85426620914679, 20.227949203380874));

        map.addListener('click', function (event) {
            marker.setPosition(event.latLng);
            var lat = document.getElementById("lat").value = marker.getPosition().lat();
            var long = document.getElementById("long").value = marker.getPosition().lng();
            GetAreasJson(lat, long);
            ShowDroplist();
        });


    });

    //Kod för att flytta marker till angivet område och centrera kartan där
    function GetLatLongFromTextArea(lat, long) {
        var latlng;
        latlng = new google.maps.LatLng(lat, long);
        marker.setPosition(latlng);
        map.setCenter(marker.getPosition());
        document.getElementById("lat").value = lat;
        document.getElementById("long").value = long;
    }

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBagdhMKVaEPqLco2PxO2NCSTPYeU_T4gU&callback=initMap"
        async defer></script>
