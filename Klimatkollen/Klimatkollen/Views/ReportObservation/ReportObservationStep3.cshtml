@model Klimatkollen.ViewModels.ObservationViewModel
@*<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">*@
 @*Compiled and minified CSS*@ 
@*<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">*@

<!-- Compiled and minified JavaScript -->
@*<script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>*@

@{
    ViewData["Title"] = "Rapportera observation";
}

<br />
<h1>Steg 3 - Fyll i värden</h1>
<h3>@Model.mainCategory.CategoryName och @Model.category.Type</h3>
<hr />

<div id="catDiv">
    <br />
    <h5>Kategorier:</h5>
    @foreach (var item in ViewBag.thirdCategories)
    {
        <button class="buttonTemp smallbtn thirdCategoryBtn" onclick="SetValue(this)" value=@item.Id>@item.Type</button>
    }
</div>

<div id="valueBox">
    @if (ViewBag.IsValueEnable == false)
    {
        <hr />
        <h5>Miljö:</h5>
        <div id="valueDiv">
            @foreach (var item in ViewBag.environment)
            {
                {
                    <button class="buttonTemp smallbtn environmentBtn" onclick="SetValueTwo(this)" value=@item.Id>@item.Type</button>
                }
            }
        </div>
    }
</div>

@using (Html.BeginForm("ReportObservationCompleted", "ReportObservation", FormMethod.Post, new { @class = "form-horizontal", role = "form", @id = "myForm" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary("", new { @class = "text-danger" })


<div class="form-group">
    @if (ViewBag.IsValueEnable == true)
    {
        if (!Model.category.Unit.Equals("Djur") && !Model.category.Unit.Equals("Annat"))
        {
            <h5>Värde:</h5>
            <div class="col-md-8" style="visibility: visible">
                @Html.EditorFor(model => model.measurement.Value, new { htmlAttributes = new { @class = "form-control", @id = "resultBoxValue" } })
            </div>
            <br />
        }
    }
    <div class="col-md-8">
        <h5>Välj plats:</h5>
        <div id="map" style="height: 400px; width:100%; border-radius: 8px; box-shadow: 3px 7px 5px #888888"></div>
        <br />
    </div>

    <div class="col-md-8">
        <h5>Datum:</h5>
        @Html.EditorFor(model => model.observation.Date, new { htmlAttributes = new { @class = "form-control" } })
        <br />
    </div>

    <h5>Kommentar för observationen:</h5>
    <div class="col-md-8">
        @Html.TextAreaFor(model => model.observation.Comment, new { htmlAttributes = new { @class = "form-control CommentTextBox", @placeholder = "Fyll i en kommentar" } })
    </div>
    <br />

    <div class="col-md-8">
        <div class="form-group">
            <button type="submit" value="Spara Observation" class="btn btn-primary btn-right">Spara observation</button>
        </div>
        <a class="btn btn-sec" href="javascript:void(0);" onclick="history.go(-1);"> &larr; Tillbaka</a>
    </div>
    <hr />

    @*Gömda element*@

    <div class="col-md-8" style="visibility: hidden">
        @Html.EditorFor(model => model.observation.Longitude, new { htmlAttributes = new { @class = "form-control", @id = "long" } })
    </div>
    <div class="col-md-8" style="visibility: hidden">
        @Html.EditorFor(model => model.observation.Latitude, new { htmlAttributes = new { @class = "form-control", @id = "lat" } })
    </div>
    <div style="visibility: hidden">
        <input type="text" name="secondMeasurement" id="resultBoxSecondMeasurement" />
    </div>
    <div style="visibility: hidden">
        @Html.EditorFor(m => @Model.measurement.thirdCategoryId, new { htmlAttributes = new { @class = "form-control btnResult", @id = "resultBoxId" } })
        @Html.EditorFor(m => @Model.category.Type, new { htmlAttributes = new { @class = "form-control" } })
        @Html.EditorFor(m => @Model.observation.maincategoryId, new { htmlAttributes = new { @class = "form-control" } })
        @Html.EditorFor(m => @Model.mainCategory.CategoryName, new { htmlAttributes = new { @class = "form-control" } })
        @Html.EditorFor(model => model.category.Unit, new { htmlAttributes = new { @class = "form-control" } })
        @Html.EditorFor(model => @Model.category.MainCategory.Id, new { htmlAttributes = new { @class = "form-control" } })
        @Html.EditorFor(model => @Model.category.Id, new { htmlAttributes = new { @class = "form-control" } })
    </div>

    <input id="hiddenPlace" type="hidden" asp-for="@Model.observation.Place" value="" />
    <input id="hiddenAdministrativeArea" type="hidden" asp-for="@Model.observation.AdministrativeArea" value="" />
    <input id="hiddenCountry" type="hidden" asp-for="@Model.observation.Country" value="" />
</div>
}



<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBagdhMKVaEPqLco2PxO2NCSTPYeU_T4gU&callback=initMap" async defer></script>

<script>
    var map, marker;

    //API-nyckel
    var key = "AIzaSyBagdhMKVaEPqLco2PxO2NCSTPYeU_T4gU"

    //Metod som hämtar områden i text utifrån koordinater och lägger dessa i droplist
    function GetAreasJson(_lat, _lng) {
        var lat = _lat;
        var lng = _lng;

        let url = "https://maps.googleapis.com/maps/api/geocode/json?latlng=" + lat + "," + lng + "&key="
            + key;

        fetch(url)
            .then(response => response.json())
            .then(data => {
                console.log(data);
                let parts = data.results[0].address_components;
                parts.forEach(part => {
                    if (part.types.includes("country")) {
                        document.getElementById("hiddenCountry").value = part.long_name;
                    }
                    if (part.types.includes("administrative_area_level_1")) {
                        document.getElementById("hiddenAdministrativeArea").value = part.long_name;
                    }
                    if (part.types.includes("transit_station")) {
                        document.getElementById("hiddenPlace").value = part.long_name;
                    }
                    else if (part.types.includes("locality")) {
                        document.getElementById("hiddenPlace").value = part.long_name;
                    }
                    else if (part.types.includes("postal_town")) {
                        document.getElementById("hiddenPlace").value = part.long_name;
                    }
                });
            })
            .catch(error => console.warn(error.message));
    }

    $(document).ready(function () {
        function myMap(lat, long) {
            var myCenter = new google.maps.LatLng(lat, long);
            var mapCanvas = document.getElementById("map");
            var latInput, longInput;

            var mapOptions = {
                center: myCenter,
                zoom: 12,
                streetViewControl: false,
                mapTypeControl: true,
                zoomControl: false,
                scrollwheel: true
            };

            map = new google.maps.Map(mapCanvas, mapOptions);
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    latInput = document.getElementById("lat").value = position.coords.latitude;
                    longInput = document.getElementById("long").value = position.coords.longitude;

                    marker = new google.maps.Marker({
                        position: { lat: latInput, lng: longInput },
                        map: map,
                        draggable: true
                    });
                    marker.addListener('click', function () {
                        map.setCenter(marker.getPosition());
                    });
                    marker.addListener('dragend', function () {
                        var lat = document.getElementById("lat").value = marker.getPosition().lat();
                        var long = document.getElementById("long").value = marker.getPosition().lng();
                        GetAreasJson(lat, long);
                    });
                    GetAreasJson(latInput, longInput);
                    map.setCenter(marker.getPosition());
                }, function () {
                    handleLocationError(true, infoWindow, map.getCenter());
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());
            }

            marker = new google.maps.Marker({
                position: myCenter,
                draggable: true
            }
            );
            marker.setMap(map);
        }

        function handleLocationError(browserHasGeolocation, infoWindow, pos) {
            infoWindow.setPosition(pos);
            infoWindow.setContent(browserHasGeolocation ?
                'Error: The Geolocation service failed.' :
                'Error: Your browser doesn\'t support geolocation.');
            infoWindow.open(map);
        }

        google.maps.event.addDomListener(window, 'load', myMap(67.85426620914679, 20.227949203380874));

        map.addListener('click', function (event) {
            marker.setPosition(event.latLng);
            var lat = document.getElementById("lat").value = marker.getPosition().lat();
            var long = document.getElementById("long").value = marker.getPosition().lng();
            GetAreasJson(lat, long);
        });
    });

</script>

<script>
    function SetValue(y) {
        var x = document.getElementById("resultBoxId");
        x.value = y.value;
    }
    function SetValueTwo(y) {
        var x = document.getElementById("resultBoxSecondMeasurement");
        x.value = y.value;
    }
    //Funktion för att sätta aktiv class på den klickade knappen
    var header = document.getElementById("catDiv");
    var btns = header.getElementsByClassName("thirdCategoryBtn");
    for (var i = 0; i < btns.length; i++) {
        btns[i].addEventListener("click", function () {
            var current = document.getElementsByClassName("active");
            if (current.length > 0) {
                current[0].className = current[0].className.replace(" active", "");
            }
            this.className += " active";

        });
    }
</script>
<script>
    //Funktion för att sätta aktiv class på den klickade knappen
    var headerTwo = document.getElementById("valueDiv");
    var btnsTwo = headerTwo.getElementsByClassName("environmentBtn");
    for (var i = 0; i < btnsTwo.length; i++) {
        btnsTwo[i].addEventListener("click", function () {
            var current = document.getElementsByClassName("activeBtnTwo");
            if (current.length > 0) {
                current[0].className = current[0].className.replace(" activeBtnTwo", "");
            }
            this.className += " activeBtnTwo";
        });
    }
</script>
