@*@model IEnumerable<float>*@
@model IEnumerable<Klimatkollen.ViewModels.MeasurementDatesViewModel>
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<link rel="stylesheet" href="~/css/site.css" />

<script>
    function ToggleChangeDates() {
        $("#ChangeDatesDiv").toggle("fast");
    }
</script>

<script>
    var temperatures = []
    var dates = [];
    var model = [];

    google.charts.load('current', { 'packages': ['line'] });
    google.charts.setOnLoadCallback(drawChart);
    function drawChart() {


        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Datum');
        data.addColumn('number', 'Temperatur');
        data.addColumn('number', 'Medeltemperatur 2020');
        data.addColumn('number', 'Medeltemperatur 2019');

        var startDate = document.getElementById("startDate").value;
        var endDate = document.getElementById("endDate").value;

        //https://stackoverflow.com/questions/4673527/converting-milliseconds-to-a-date-jquery-javascript
        Date.prototype.customFormat = function (formatString) {
            var YYYY, YY, MMMM, MMM, MM, M, DDDD, DDD, DD, D, hhhh, hhh, hh, h, mm, m, ss, s, ampm, AMPM, dMod, th;
            YY = ((YYYY = this.getFullYear()) + "").slice(-2);
            MM = (M = this.getMonth() + 1) < 10 ? ('0' + M) : M;
            MMM = (MMMM = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][M - 1]).substring(0, 3);
            DD = (D = this.getDate()) < 10 ? ('0' + D) : D;
            DDD = (DDDD = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"][this.getDay()]).substring(0, 3);
            th = (D >= 10 && D <= 20) ? 'th' : ((dMod = D % 10) == 1) ? 'st' : (dMod == 2) ? 'nd' : (dMod == 3) ? 'rd' : 'th';
            formatString = formatString.replace("#YYYY#", YYYY).replace("#YY#", YY).replace("#MMMM#", MMMM).replace("#MMM#", MMM).replace("#MM#", MM).replace("#M#", M).replace("#DDDD#", DDDD).replace("#DDD#", DDD).replace("#DD#", DD).replace("#D#", D).replace("#th#", th);
            h = (hhh = this.getHours());
            if (h == 0) h = 24;
            if (h > 12) h -= 12;
            hh = h < 10 ? ('0' + h) : h;
            hhhh = hhh < 10 ? ('0' + hhh) : hhh;
            AMPM = (ampm = hhh < 12 ? 'am' : 'pm').toUpperCase();
            mm = (m = this.getMinutes()) < 10 ? ('0' + m) : m;
            ss = (s = this.getSeconds()) < 10 ? ('0' + s) : s;
            return formatString.replace("#hhhh#", hhhh).replace("#hhh#", hhh).replace("#hh#", hh).replace("#h#", h).replace("#mm#", mm).replace("#m#", m).replace("#ss#", ss).replace("#s#", s).replace("#ampm#", ampm).replace("#AMPM#", AMPM);
        };

    @foreach(var m in Model)
    {
        @*@:model.push("@m");*@
        @:model.push({
        @:Date: new Date('@m.Date'),
        @:Value: '@m.AvgTemp',
        @:});
    }

        for (var i = 0; i < model.length; i++) {
            if (Date.parse(model[i].Date) >= Date.parse(startDate) && Date.parse(model[i].Date) <= Date.parse(endDate)) {
                temperatures.push({ temp: model[i].Value, date: model[i].Date.customFormat("#DD#/#MM#/#YYYY#") });
                dates.push(model[i].Date.customFormat("#DD#/#MM#/#YYYY#"));
            }
        }

        var medianTemperature = 0;

        for (var i = 0; i < temperatures.length; i++) {
            medianTemperature += parseFloat(temperatures[i].temp)
        }
        temperatures.average

        medianTemperature = medianTemperature / temperatures.length;

        for (y = 0; y < temperatures.length; y++) {
            data.addRow([temperatures[y].date, parseFloat(temperatures[y].temp), medianTemperature, medianTemperature - 0.80]);
        }


        var options = {
            chart: {
                title: 'Se temperatur över tid'
            },
            //width: 900,
            //height: 500,
            axes: {
                x: {
                    100: { side: 'top' }
                }
            }
        };

        var chart = new google.charts.Line(document.getElementById('line_top_x'));

        chart.draw(data, google.charts.Line.convertOptions(options));

        temperatures = []
        dates = []
    }

        function findTemperaturesFromLocation(lon, lat) {

            temperatures.length = 0
            dates.length = 0;
            var url = "https://opendata-download-metanalys.smhi.se/api/category/mesan1g/version/2/geotype/point/lon/" + lat.toFixed(2) + "/lat/" + lon.toFixed(2) + "/data.json"
            var url1 = "https://opendata-download-metanalys.smhi.se/api/category/mesan1g/version/2/geotype/point/lon/12.158/lat/57.5812/data.json"
            var today = new Date();

            fetch(url)
                 .then(response => response.json())
             .then(data => {
                 var data1 = data

                 var counter = 0;
                 for (var i = 0; i < data1.timeSeries[0].parameters.length; i++) {
                     if (data1.timeSeries[0].parameters[i].unit[0] == "c") {
                         counter += 1;
                         if (counter != 2) {
                             temperatures.push({ temp: parseFloat(data1.timeSeries[0].parameters[i].values[0]), date: (today.getDate() + i - 25) + '/' + (today.getMonth() + 1) + '/' + today.getFullYear() });
                             dates.push(i + '/' + (today.getMonth() + 1) + '/' + today.getFullYear());
                         }
                     }
                 }
                 drawChart()
             })
        }

    var map, marker;
    $(document).ready(function () {
        function myMap(lat, long) {
            var myCenter = new google.maps.LatLng(lat, long);
            var mapCanvas = document.getElementById("map1");
            var latInput, longInput;
            var mapOptions = {
                center: myCenter,
                zoom: 12,
                streetViewControl: false,
                mapTypeControl: true,
                zoomControl: false,
                scrollwheel: true
            };
            map = new google.maps.Map(mapCanvas, mapOptions);
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    latInput = document.getElementById("lat").value = position.coords.latitude;
                    longInput = document.getElementById("long").value = position.coords.longitude;
                    marker = new google.maps.Marker({
                        position: { lat: latInput, lng: longInput },
                        map: map,
                        draggable: true
                    });
                    marker.addListener('click', function () {
                        map.setCenter(marker.getPosition());
                    });
                    marker.addListener('dragend', function () {
                        document.getElementById("lat").value = marker.getPosition().lat();
                        document.getElementById("long").value = marker.getPosition().lng();
                    });
                    map.setCenter(marker.getPosition());
                }, function () {
                    handleLocationError(true, infoWindow, map.getCenter());
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());
            }
        }
        function handleLocationError(browserHasGeolocation, infoWindow, pos) {
            infoWindow.setPosition(pos);
            infoWindow.setContent(browserHasGeolocation ?
                'Error: The Geolocation service failed.' :
                'Error: Your browser doesn\'t support geolocation.');
            infoWindow.open(map);
        }
        google.maps.event.addDomListener(window, 'load', myMap(67.85426620914679, 20.227949203380874));
        map.addListener('click', function (event) {
            marker.setPosition(event.latLng);
            var latInput = document.getElementById("lat").value = marker.getPosition().lat();
            var longInput = document.getElementById("long").value = marker.getPosition().lng();
            findTemperaturesFromLocation(latInput, longInput)
        });
    });



</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBagdhMKVaEPqLco2PxO2NCSTPYeU_T4gU&callback=initMap"
        async defer></script>

<h3> Temperaturdata </h3>
<div class="row">
    <div id="line_top_x" class="chart"> </div>
</div>

<div id="ChangeDatesDiv" style="display:none">
    <div class="form-group row">
        <div class="col-md-8">
            <h5>Välj plats:</h5>
            <div id="map1" style="height: 400px; width:100%; border-radius: 8px; box-shadow: 3px 7px 5px #888888"></div>
            <br />
        </div>
    </div>
    <div class="form-group row">
        <div class="col-sm-4">
            <label for="date">Datum från:</label>
            <input type="date" class="form-control" value="@DateTime.Today.AddYears(-1).ToString("yyyy/MM/dd")" id="startDate" onchange="drawChart()" />
        </div>
        <div class="col-sm-4">
            <label for="date">Datum till:</label>
            <input type="date" class="form-control" value="@DateTime.Now.ToString("yyyy/MM/dd")" id="endDate" onchange="drawChart()" />
        </div>
    </div>
    <input type="hidden" id="lat" value="" />
    <input type="hidden" id="long" value="" />
    <br />
</div>
<div>
    <button class="btn btn-outline-primary" onclick="ToggleChangeDates()">Ändra datum och plats för temperaturdata</button>
</div>
@*//Div för diagrammet*@
